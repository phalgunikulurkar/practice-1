Python

- checking the data type
name='john'
type(name)

- Assign multiple values
a=b=c=15
a
15
b
15
c
15
a,b,c=1,2,3
a=1
b=2
c=3

Normal TOkens
Keywords - python ketwords are special reserved keyword.

Identifiers - An Indentifier is the name used to indentifiy a veriable function, class or object.

Literals - Formed by enclosing a text within quotes. Both single and double quotes can be used.

- password='abcd'
confirmend_password='abcd'
password==confirmed_password
True

Operators- Operators are special symbols that are used to carry out arithmetic and logical operations
Arithmetic Operators
Assignment Operators
= x=10
+= x=x+2
-= x=x-2
*= x=x*12
/= x=x/3
|= x=x|6
Comparison Operators
x=15
y=16
x==15
true
x==15 and y!=16
False
NUMS=[1,2,3,4]
4 IN NUMS
True
8 in num
False
8 not in nums
false

DATA TYPES IN PYTHON
Immutable - String, Numbers and Tuples
Mutable - Dictionaries, List and Sets

Immutables - Numbers
Int, Float, Complex

String
string="abcvdfsgfdr"
len(string)
11
string[0]
'a'
string[0:4]
'abcv'
if we want to remove the last 1 or 3 char
string[:-2]
'abcvdfsgfdr'

if we want to replace the values
string.replace ('b','a')
'aacvdfsgfdr'

TUPLES
WEEKS = ("Sunday","Monday",Tuesday",Wednesday",Thursday",Friday", Saturday")
type(weeks)
Tuple

Mutable
Lists
salaries = [10,15,20]
type(salaries)
list
salaries[0]=18 or
salaries
[18,15,20]
salaries[0]=salaries[0]+8 or
salaries[0] +=8
salries
[26,15,20]

salaries.append(28)
salaries
[26,15,20,28]

Dictionaries

salaries = {'John':15,'Jane':14,'Johney':5}
type(salaries)
dict
salaries["jane"]
14

Sets
s=set()
type(s)
"set"
s.add(1)
{1}
s.add(2)
{1,2}
1 in s
true
3 in s
false

POP
nums = [1,2,3,4]

X=NUM.POP() - POP is used for remove the last letter or number.

FOR LOOP

for x in nums:
    print(x) - output is print all the numbers in new line.
    print ('Done') as fo done

sal= {'John':15,'Jane':14,'Johney':5}
if we want to add the new salaries in list
sal["Andy"]=25
print(sal)
del sal["Andy"]
print(sal)

for item in sal.key():
print(item)

if we want to creat the loop
l=[]
using for loop
for x in range(0,10):
    l.append(x)
print(l)


CONDITIONAL STATEMENTS
These statements are used to change the flow of execution when a provided condition is True or False.
- If-else
- Nested if-else

ex - 
x=20
if x<20:
print("x is less than 20")
elif x==20:
print("x is equal to 20")
else:
print("x is greater than 20")

ex - nested-if-else












